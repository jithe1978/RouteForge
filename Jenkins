pipeline {
  agent any
  environment {
    AWS_DEFAULT_REGION = 'us-east-2'
    ACCOUNT_ID = '577999460012'
    ECR_FRONT = "${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/pdf-frontend"
    ECR_BACK  = "${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/pdf-backend"
    CHART_APP = 'charts/pdf-app'      // <-- your new chart path
    CHART_ING = 'charts/ingress'      // <-- your existing ingress chart path
    NAMESPACE = 'pdfapp'
    EKS_CLUSTER = 'mern-app-cluster'   // <-- fill this in
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Login to ECR') {
      steps {
        powershell '''
          $ErrorActionPreference = "Stop"
          $env:AWS_PAGER = ""
          aws ecr get-login-password --region $env:AWS_DEFAULT_REGION |
            docker login --username AWS --password-stdin "$($env:ACCOUNT_ID).dkr.ecr.$($env:AWS_DEFAULT_REGION).amazonaws.com"
        '''
      }
    }

    stage('Build & Push Images') {
      steps {
        powershell '''
          $ErrorActionPreference = "Stop"

          # FRONTEND (expects .env.production with VITE_API_BASE=/api)
          Push-Location frontend
          docker build -t pdf-frontend:prod .
          docker tag  pdf-frontend:prod "$env:ECR_FRONT:prod"
          docker push "$env:ECR_FRONT:prod"
          Pop-Location

          # BACKEND (Flask/Gunicorn on :5000)
          Push-Location backend
          docker build -t pdf-backend:prod .
          docker tag  pdf-backend:prod "$env:ECR_BACK:prod"
          docker push "$env:ECR_BACK:prod"
          Pop-Location
        '''
      }
    }

    stage('Update kubeconfig') {
      steps {
        powershell '''
          $ErrorActionPreference = "Stop"
          aws eks update-kubeconfig --name $env:EKS_CLUSTER --region $env:AWS_DEFAULT_REGION
          kubectl version --client
          helm version
        '''
      }
    }

    stage('Deploy App (Helm)') {
      steps {
        powershell '''
          $ErrorActionPreference = "Stop"
          helm upgrade --install pdf-app $env:CHART_APP -n $env:NAMESPACE --create-namespace `
            --set images.frontend="$env:ECR_FRONT:prod" `
            --set images.backend="$env:ECR_BACK:prod"
          kubectl -n $env:NAMESPACE get deploy,svc,pods -o wide
        '''
      }
    }

    stage('Deploy Ingress (Helm)') {
      steps {
        powershell '''
          $ErrorActionPreference = "Stop"
          # Reuse your existing ingress chart + the PDF app values file at repo root
          helm upgrade --install pdfapp-ingress $env:CHART_ING -f pdfapp-ingress-values.yaml
          kubectl -n $env:NAMESPACE get ingress
        '''
      }
    }
  }
}