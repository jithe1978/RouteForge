apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.backend.replicas }}
  selector: { matchLabels: { app: backend } }
  template:
    metadata: { labels: { app: backend } }
    spec:
      containers:
        - name: backend
          image: "{{ .Values.images.backend }}"
          imagePullPolicy: IfNotPresent
          ports: [{ containerPort: {{ .Values.backend.port }}, name: http }]
          env:
            - name: STORAGE_MODE
              value: "fs"
            - name: DATA_DIR
              value: "/data"
            - name: GUNICORN_TIMEOUT
              value: "180"
          volumeMounts:
            - name: datadir
              mountPath: /data
          readinessProbe:
            httpGet: { path: /health, port: {{ .Values.backend.port }} }
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          livenessProbe:
            httpGet: { path: /health, port: {{ .Values.backend.port }} }
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 3
            failureThreshold: 5
          resources:
{{ toYaml .Values.resources.backend | indent 12 }}
      volumes:
        - name: datadir
          emptyDir:
            {{- if .Values.backend.storage.emptyDirSize }}
            sizeLimit: {{ .Values.backend.storage.emptyDirSize | quote }}
            {{- end }}